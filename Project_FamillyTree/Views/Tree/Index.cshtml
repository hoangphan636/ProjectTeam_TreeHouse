@using Microsoft.AspNetCore.Http
@model List<FamilyMemberNode>

<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" type="text/css" href="styles.css">
    <script src="script.js"></script>
    <link rel="stylesheet" type="text/css" href="/index.css">

    <style>
        .sibling-container {
            display: flex;
            flex-wrap: wrap;
        }

        .sibling-list {
            flex: 1 1 auto;
            margin: 0;
            padding: 0;
            list-style: none;
            text-align: center;
        }

            .sibling-list li {
                display: inline-block;
                margin-right: 10px;
            }
    </style>





</head>

<body>
    <div class="header">
        <div class="header-content">
            <h1 class="header-title">Family Tree</h1>
            <div class="header-buttons">
                <a href="#" class="header-button" style="margin-left: 680px;">Activities</a>
            </div>
        </div>
        <button class="header-button">Login</button>
    </div>
    <div id="activityPopup" class="popup">
        <div class="popup-content">
            <h2 id="activityTitle"></h2>
            <input type="text" id="activityName" placeholder="Activity Name">
            <input type="text" id="activityDescription" class="large-input" placeholder="Activity Description">
            <input type="text" id="activityStartDate" placeholder="Start Date">
            <input type="text" id="activityEndDate" placeholder="End Date">
            <input type="text" id="activityPhone" placeholder="Phone Number">
            <input type="text" id="activityEmail" placeholder="Email">
            <input type="text" id="activityCreatedBy" placeholder="Created By">
        </div>
        <button id="closePopup" class="popup-close">Close</button>
    </div>


    <div class="sidebar">
        <div class="sidebar-header">
            <h2>Me</h2>
        </div>
        <div class="sidebar-menu">
            <a href="#" onclick="showSection('personal')">Personal</a>
            <a href="#" onclick="showSection('contact')">Contact</a>
            <a href="#" onclick="showSection('biographical')">Biographical</a>
        </div>
        <div class="sidebar-content">
            <div id="personal" class="section active">
                <h2>Personal</h2>
                <input type="hidden" id="personIdInput" value="">
                <input type="text" class="large-input" placeholder="ID" id="idInput">
                <input type="text" class="large-input" placeholder="Full Name" id="fullNameNameInput">
                <input type="text" class="large-input" placeholder="Gender" id="genderInput">
                <input type="text" class="large-input" placeholder="Day of birth" id="dateOfBirthInput">
                <input type="text" class="large-input" placeholder="Phone" id="phoneInput">
                <input type="text" class="large-input" placeholder="Email" id="emailInput">
                <input type="text" class="large-input" placeholder="Address" id="addressInput">
                <input type="text" class="large-input" placeholder="Family" id="familyInput">
            </div>


            <div id="contact" class="section active">
                <h2>Contact</h2>
                <input type="text" class="large-input" placeholder="Email">
                <input type="text" class="large-input" placeholder="Website">
                <input type="text" class="large-input" placeholder="Blog">
                <input type="text" class="large-input" placeholder="Photo site">
                <input type="text" class="large-input" placeholder="Home tel">
                <input type="text" class="large-input" placeholder="Work tel">
                <input type="text" class="large-input" placeholder="Mobile">
                <input type="text" class="large-input" placeholder="Address">
                <input type="text" class="large-input" placeholder="Other">
            </div>

            <div id="biographical" class="section active">
                <h2>Biographical</h2>
                <input type="text" class="large-input" placeholder="Birth place">
                <input type="text" class="large-input" placeholder="Profession">
                <input type="text" class="large-input" placeholder="Company">
                <input type="text" class="large-input" placeholder="Interests">
                <input type="text" class="large-input" placeholder="Activities">
                <input type="text" class="large-input" placeholder="Bio notes">
            </div>

            <div class="sidebar-footer">
                <p>Click to add your relatives:</p>
                <button onclick="addParent()">Add Parent</button>
                <button onclick="addRelative('partner')">Add Partner</button>
                <button onclick="addRelative('sibling')">Add Brother/Sister</button>
                <button onclick="addRelative('child')">Add Child</button>
                <button onclick="saveData()">Save</button>
            </div>
        </div>
    </div>

    <div class="content">
        <div class="tree">
            <ul>
                <li>
                    <a href="#" style="font-size: 24px;">Me</a>
                    <ul id="familyTree"></ul>
                </li>
            </ul>
        </div>
    </div>


    <script>
        // Lấy các phần tử cần thiết
        var activityButton = document.querySelector(".header-button");
        var popup = document.getElementById("activityPopup");
        var closePopupButton = document.getElementById("closePopup");

        // Xử lý sự kiện khi nhấp vào nút "Activities"
        activityButton.addEventListener("click", function() {
            // Hiển thị popup
            popup.style.visibility = "visible";
            popup.style.opacity = 1;

            // Lấy thông tin hoạt động và cập nhật vào popup
            var activityTitle = document.getElementById("activityTitle");
            var activityDescription = document.getElementById("activityDescription");
            var activityStartDate = document.getElementById("activityStartDate");
            var activityEndDate = document.getElementById("activityEndDate");
            var activityPhone = document.getElementById("activityPhone");
            var activityEmail = document.getElementById("activityEmail");
            var activityCreatedBy = document.getElementById("activityCreatedBy");

            // Gán thông tin cho các phần tử trong popup
            activityTitle.textContent = "Activity Title";
            activityDescription.textContent = "Activity Description";
            activityStartDate.textContent = "Start Date";
            activityEndDate.textContent = "End Date";
            activityPhone.textContent = "Phone Number";
            activityEmail.textContent = "Email";
            activityCreatedBy.textContent = "Created By";
        });

        // Xử lý sự kiện khi nhấp vào nút đóng popup
        closePopupButton.addEventListener("click", function() {
            // Ẩn popup
            popup.style.visibility = "hidden";
            popup.style.opacity = 0;
        });
    </script>

    <script>
        var existingMembers = [];

        function displayFamilyTree(data, parentElement) {
            var siblingContainer = document.createElement("div");
            siblingContainer.classList.add("sibling-container");
            var siblingList = document.createElement("ul");
            siblingList.classList.add("sibling-list");

            for (var i = 0; i < data.length; i++) {
                var person = data[i];
                var personId = person.id;

                var existingMember = existingMembers.find(function(member) {
                    return member.id === personId;
                });

                if (existingMember) {
                    var personNode = existingMember.node;
                    var personLink = personNode.querySelector("a");
                    personLink.textContent = person.fullName;
                } else {
                    var personNode = document.createElement("li");
                    var personLink = document.createElement("a");
                    personLink.textContent = person.fullName;
                    personLink.href = "javascript:void(0);";
                    personLink.setAttribute("data-id", personId);
                    personLink.addEventListener("click", function() {
                        var id = this.getAttribute("data-id");
                        document.getElementById("personIdInput").value = id; // Gán giá trị id vào personIdInput
                        fetch("http://localhost:45571/api/FamilyMember/GetGetFamilyMemberById/" + id)
                            .then((response) => response.json())
                            .then((data) => {
                                var givenNamesInput = document.getElementById("givenNamesInput");

                                idInput.value = data.id;
                                fullNameNameInput.value = data.fullName;
                                var genderInput = document.getElementById("genderInput");
                                if (data.gender === 1) {
                                    genderInput.value = "Man";
                                } else if (data.gender === 0) {
                                    genderInput.value = "Woman";
                                } else {
                                    genderInput.value = "";
                                }
                                dateOfBirthInput.value = data.dob;
                                phoneInput.value = data.phone;
                                emailInput.value = data.email;
                                addressInput.value = data.address;
                                familyInput.value = data.familyId;
                            })
                            .catch((error) => {
                                console.error("Lỗi khi lấy dữ liệu từ API:", error);
                            });
                    });

                    personNode.appendChild(personLink);

                    existingMembers.push({ id: personId, node: personNode });

                    if (person.relatives && person.relatives.length > 0) {
                        var relativeList = document.createElement("ul");
                        personNode.appendChild(relativeList);
                        displayFamilyTree(person.relatives, relativeList);
                    }

                    if (person.relationType === "Sibling") {
                        siblingList.appendChild(personNode);
                    } else {
                        parentElement.appendChild(personNode);
                    }
                }
            }

            if (siblingList.childNodes.length > 0) {
                siblingContainer.appendChild(siblingList);
                parentElement.appendChild(siblingContainer);
            }
        }

        function updateFamilyMember(id, updatedData) {
            console.log("a", updatedData)
            fetch("http://localhost:45571/api/FamilyMember/UpdateFamilyMember/" + id, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(updatedData),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log("Thành viên được cập nhật thành công:", data);
                })
                .catch((error) => {
                    console.error("Lỗi khi cập nhật thông tin thành viên:", error);
                });
        }

        function saveData() {
            var idInput = document.getElementById("personIdInput");
            var id = idInput.value;
            var updatedData = {
                id: id,
                fullName: fullNameNameInput.value,
                gender: genderInput.value === "Man" ? 1 : genderInput.value === "Woman" ? 0 : null,
                dob: dateOfBirthInput.value,
                phone: phoneInput.value,
                email: emailInput.value,
                address: addressInput.value,
                familyId: familyInput.value
            };
            updateFamilyMember(id, updatedData);
        }

        @{
            var id = Context.Session.GetString("MemberFamilyId");
        }
        var id = '@id'; 

        fetch("http://localhost:45571/api/Family/" + id + "/tree1")
            .then((response) => response.json())
            .then((data) => {
                var familyTreeElement = document.getElementById("familyTree");
                displayFamilyTree(data, familyTreeElement);
            })
            .catch((error) => {
                console.error("Lỗi khi lấy dữ liệu từ API:", error);
            });


    </script>



    <script>
        function showSection(sectionId) {
            var sections = document.getElementsByClassName("section");
            for (var i = 0; i < sections.length; i++) {
                sections[i].classList.remove("active");
            }

            var section = document.getElementById(sectionId);
            section.classList.add("active");
        }

        function addParent() {
            var selectedNode = document.querySelector(".selected");
            if (selectedNode) {
                var newNode1 = document.createElement("li");
                newNode1.innerHTML = '<a href="#">Morther</a>';

                var newNode2 = document.createElement("li");
                newNode2.innerHTML = '<a href="#">Farther</a>';

                var parentList = document.createElement("ul");
                parentList.style.display = "block";
                parentList.appendChild(newNode1);
                parentList.appendChild(newNode2);

                var parentNode = document.createElement("li");
                parentNode.style.display = "inline";
                parentNode.appendChild(parentList);

                var grandparentNode = selectedNode.parentNode.parentNode;
                var grandparentList = grandparentNode.querySelector("ul");
                if (!grandparentList) {
                    grandparentList = document.createElement("ul");
                    grandparentNode.appendChild(grandparentList);
                }

                var siblingNodes = Array.from(grandparentList.children);
                var selectedNodeIndex = siblingNodes.indexOf(selectedNode);

                siblingNodes.splice(selectedNodeIndex, 0, parentNode);

                grandparentList.innerHTML = '';
                siblingNodes.forEach(function(node) {
                    grandparentList.appendChild(node);
                });

                siblingNodes = Array.from(grandparentList.children);

                selectedNode.classList.remove("selected");
                newNode1.firstChild.classList.add("selected");
                newNode2.firstChild.classList.add("selected");
            }
        }

        function addRelative(type) {
            var selectedNode = document.querySelector(".selected");
            if (selectedNode) {
                var newNode = document.createElement("li");
                newNode.innerHTML = '<a href="#">' + type.charAt(0).toUpperCase() + type.slice(1) + "</a>";

                var addRelativeButtons = newNode.querySelectorAll(".sidebar-footer button");
                for (var i = 0; i < addRelativeButtons.length; i++) {
                    addRelativeButtons[i].addEventListener("click", function() {
                        addRelative(this.dataset.type);
                    });
                }

                newNode.addEventListener("click", function(event) {
                    event.stopPropagation();
                    var currentSelected = document.querySelector(".selected");
                    if (currentSelected) {
                        currentSelected.classList.remove("selected");
                    }
                    this.classList.add("selected");
                });

                selectedNode.classList.remove("selected");

                if (type === "child") {
                    var childList = selectedNode.querySelector("ul");
                    if (!childList) {
                        childList = document.createElement("ul");
                        selectedNode.appendChild(childList);
                    }
                    childList.appendChild(newNode);
                    var givenNamesInput = document.getElementById("givenNamesInput");
                    givenNamesInput.addEventListener("input", function() {
                        newNode.firstChild.textContent = this.value;
                    });
                } else {
                    var siblingNode = document.createElement("li");
                    siblingNode.appendChild(newNode);

                    var parentSiblingList = selectedNode.parentNode.parentNode.querySelector("ul");
                    if (!parentSiblingList) {
                        parentSiblingList = document.createElement("ul");
                        selectedNode.parentNode.parentNode.appendChild(parentSiblingList);
                    }

                    var siblingNodes = Array.from(parentSiblingList.children);
                    var selectedNodeIndex = siblingNodes.indexOf(selectedNode);

                    siblingNodes.splice(selectedNodeIndex + 1, 0, siblingNode);

                    parentSiblingList.innerHTML = "";
                    siblingNodes.forEach(function(node) {
                        parentSiblingList.appendChild(node);
                    });

                    siblingNodes = Array.from(parentSiblingList.children);
                }
            }
        }

        var treeNodes = document.querySelectorAll(".tree li a");
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].addEventListener("click", function() {
                var currentSelected = document.querySelector(".selected");
                if (currentSelected) {
                    currentSelected.classList.remove("selected");
                }
                this.parentNode.classList.add("selected");
            });
        }

        window.addEventListener("DOMContentLoaded", function() {
            showSection("personal");
            var meNode = document.querySelector(".tree li a");
            meNode.classList.add("selected");
        });


        window.addEventListener("DOMContentLoaded", function() {
            showSection("personal");
        });
    </script>
</body>

</html>