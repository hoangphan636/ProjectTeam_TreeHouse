@using Microsoft.AspNetCore.Http
@model List<FamilyMemberNode>

@{
    Layout = null;
}
<!DOCTYPE html>
<html>

<head>
    <link rel="stylesheet" type="text/css" href="styles.css">
    <script src="script.js"></script>
    <link rel="stylesheet" type="text/css" href="/index.css">

    <style>
        body {
            margin: 0;
            padding: 0;
        }

        .header {
            background-image: url('https://www.shutterstock.com/image-vector/vector-horizontal-seamless-tropical-rainforest-260nw-1062464402.jpg');
            padding: 1px;
            border-bottom: 1px solid black;
        }

        .container {
            display: flex;
            border: 1px solid #ccc;
        }

        .sidebar {
            background-image: url('https://marketplace.canva.com/EAFMFYA5zg4/1/0/225w/canva-tropical-aesthetic-sage-green-phone-wallpaper-3j0YGcT0Z8c.jpg');
            width: 270px;
            height: 100vh;
            background-color: #f1f1f1;
            padding: 20px;
            box-sizing: border-box;
            border-right: 1px solid black;
            float: left;
        }

        .sidebar-header {
            text-align: center;
            margin-bottom: 20px;
        }

        .sidebar-menu {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            margin-bottom: 20px;
        }

            .sidebar-menu a {
                padding: 6px 8px;
                text-decoration: none;
                font-size: 16px;
                color: #818181;
            }

                .sidebar-menu a:hover {
                    color: #f1f1f1;
                    background-color: #818181;
                }

        .sidebar-content {
            display: flex;
            flex-direction: column;
        }

        .section {
            display: none;
        }

            .section.active {
                display: flex;
                flex-direction: column;
                margin-bottom: 20px;
            }

            .section h2 {
                margin-bottom: 5px;
            }

            .section input {
                margin-bottom: 10px;
            }

        .large-input {
            padding: 5px;
            font-size: 13px;
        }

        .sidebar-footer {
            margin-top: auto;
            text-align: center;
        }

            .sidebar-footer p {
                margin-bottom: 10px;
            }

            .sidebar-footer button {
                display: block;
                width: 100%;
                padding: 5px;
                margin-bottom: 5px;
            }

        .content {
            background-image: url('https://thuthuatnhanh.com/wp-content/uploads/2021/12/background-cay-xanh-ve-don-gian-dep.jpg');
            background-size: 1220px;
            background-repeat: no-repeat;
            background-position: center;
            flex-grow: 1;
            padding: 20px;
            height: 710px;
            margin-left: 260px;
        }

        .tree {
            margin: 50px auto;
            display: flex;
            justify-content: center;
            align-items: center;
            width: 100%;
            max-width: 800px;
        }

            .tree ul {
                padding-top: 20px;
                position: relative;
                transition: all 0.5s;
                display: flex; /* Display the list as a flex container */
                justify-content: center; /* Center the list items horizontally */
            }

            .tree li {
                text-align: center;
                list-style-type: none;
                position: relative;
                padding: 20px 5px 0 5px;
                transition: all 0.5s;
            }

                .tree li::before,
                .tree li::after {
                    content: "";
                    position: absolute;
                    top: 0;
                    right: 50%;
                    border-top: 1px solid #ccc;
                    width: 50%;
                    height: 20px;
                }

                .tree li::after {
                    right: auto;
                    left: 50%;
                    border-left: 1px solid #ccc;
                }

                .tree li:only-child::after,
                .tree li:only-child::before {
                    display: none;
                }

                .tree li:only-child {
                    padding-top: 0;
                }

                .tree li:first-child::before,
                .tree li:last-child::after {
                    border: 0 none;
                }

                .tree li:last-child::before {
                    border-right: 1px solid #ccc;
                    border-radius: 0 5px 0 0;
                }

                .tree li:first-child::after {
                    border-radius: 5px 0 0 0;
                }

            .tree ul ul::before {
                content: "";
                position: absolute;
                top: 0;
                left: 50%;
                border-left: 1px solid #ccc;
                width: 0;
                height: 20px;
            }

            .tree li a {
                border: 1px solid #ccc;
                padding: 8px 10px;
                text-decoration: none;
                color: black;
                font-family: arial, verdana, tahoma;
                font-size: 20px;
                display: inline-block;
                border-radius: 5px;
                transition: all 0.5s;
                line-height: 1.2;
                background: wheat;
            }

                .tree li a:hover,
                .tree li a:hover + ul li a {
                    background: #c8e4f8;
                    color: #000;
                    border: 1px solid #94a0b4;
                }

                    .tree li a:hover + ul li::after,
                    .tree li a:hover + ul li::before,
                    .tree li a:hover + ul::before,
                    .tree li a:hover + ul ul::before {
                        border-color: #94a0b4;
                    }

            .tree li.spouse-node::before,
            .tree li.selected-node::before,
            .tree li.parent-node::before,
            .tree li.parent-node::after {
                content: "";
                position: absolute;
                top: 0;
                left: 50%;
                border-top: 1px solid black;
                width: 0;
                z-index: -1;
            }

            .tree li.parent-node::before {
                height: calc(50% - 20px);
            }

            .tree li.parent-node::after {
                height: 50%;
            }

            .tree li.parent-node {
                position: relative;
            }





        /*popup*/
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #f5f5f5;
            padding: 10px;
        }

        .header-content {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .header-title {
            margin: 0;
        }

        .header-buttons {
            flex-grow: 1;
            display: flex;
            justify-content: center;
        }

        .header-button {
            padding: 6px 12px;
            border-radius: 4px;
            background-color: #eee;
            text-decoration: none;
            color: #333;
            font-weight: bold;
            border: none;
            cursor: pointer;
        }

    </style>




</head>

<body>
    <div class="header">
        <div class="header-content">
            <h1 class="header-title" style="color:white">Family Tree</h1>
            <div class="header-buttons">
                <a href="/Activities" class="header-button" style="margin-left: 500px">Activities</a>
            </div>
            <div class="header-buttons">
                <a href="/Albums" class="header-button">Album</a>
            </div>
        </div>
        <form asp-action="Logout" asp-controller="Tree" style="margin-left=250px">
            <input type="submit" value="Logout" />
        </form>
    </div>

    <div class="sidebar">
        @* <div class="sidebar-header">
        <h2>Me</h2>
        </div>*@
        <div class="sidebar-content">
            <div id="personal" class="section active">
                <h2 style="color:white">Personal</h2>
                <input type="hidden" id="personIdInput" value="">
                <input type="text" class="large-input" placeholder="ID" id="idInput">
                <input type="text" class="large-input" placeholder="Full Name" id="fullNameNameInput">
                <select class="large-input" id="genderInput">
                    <option value="">Select gender</option>
                    <option value="1">Man</option>
                    <option value="0">Woman</option>
                </select>
                <input type="date" class="large-input" placeholder="Day of birth" id="dateOfBirthInput" style="margin-top:10px">
                <input type="text" class="large-input" placeholder="Phone" id="phoneInput">
                <input type="text" class="large-input" placeholder="Email" id="emailInput">
                <input type="text" class="large-input" placeholder="Address" id="addressInput">
                <input type="text" class="large-input" placeholder="Family" id="familyInput">
                <button onclick="saveInforNode()">Save Information</button>
            </div>
            <div class="sidebar-footer">
                <p style="color:white">Click to add your relatives:</p>
                <button onclick="addParentNode('Parent')">Add Parent</button>
                <button onclick="addSpouseNode()">Add Spouse</button>
                <button onclick="addSiblingNode('Sibling')">Add Brother/Sister</button>
                <button onclick="addChildNode('Child')">Add Child</button>
                <button onclick="deleteSelectedNode()">Delete</button>
                <button onclick="saveData()">Save</button>
            </div>
        </div>
    </div>

    <div>
        <div class="content">
            <div class="tree">
                <ul>
                    <li>
                        @*<a href="#" style="font-size: 24px;">Me</a>*@
                        <ul id="familyTree"></ul>
                    </li>
                </ul>
            </div>
        </div>
    </div>



    <script>
        var activityButton = document.querySelector(".header-button");
        var popup = document.getElementById("activityPopup");
        var closePopupButton = document.getElementById("closePopup");

        activityButton.addEventListener("click", function() {
            popup.style.visibility = "visible";
            popup.style.opacity = 1;
            var activityTitle = document.getElementById("activityTitle");
            var activityDescription = document.getElementById("activityDescription");
            var activityStartDate = document.getElementById("activityStartDate");
            var activityEndDate = document.getElementById("activityEndDate");
            var activityPhone = document.getElementById("activityPhone");
            var activityEmail = document.getElementById("activityEmail");
            var activityCreatedBy = document.getElementById("activityCreatedBy");

            activityTitle.textContent = "Activity Title";
            activityDescription.textContent = "Activity Description";
            activityStartDate.textContent = "Start Date";
            activityEndDate.textContent = "End Date";
            activityPhone.textContent = "Phone Number";
            activityEmail.textContent = "Email";
            activityCreatedBy.textContent = "Created By";
        });

        closePopupButton.addEventListener("click", function() {
            popup.style.visibility = "hidden";
            popup.style.opacity = 0;
        });
    </script>




    @*add node relation*@
    <script>

        var selectedNode = null;

        function displayFamilyTree(data, parentElement) {
            var siblingContainer = document.createElement("div");
            siblingContainer.classList.add("sibling-container");
            var siblingList = document.createElement("ul");
            siblingList.classList.add("sibling-list");

            var existingMembers = {};

            var memberFamilyId = @Context.Session.GetString("MemberFamilyId");

            var siblingRelativeList = [];

            function createPersonNode(person) {
                //gender dropdown
                var genderSelect = document.createElement("select");
                genderSelect.classList.add("large-input");
                genderSelect.id = "genderInput";

                var womanOption = document.createElement("option");
                womanOption.value = "Woman";
                womanOption.textContent = "Woman";

                var manOption = document.createElement("option");
                manOption.value = "Man";
                manOption.textContent = "Man";

                genderSelect.appendChild(womanOption);
                genderSelect.appendChild(manOption);


                //get node
                var personNode = document.createElement("li");
                var personLink = document.createElement("a");
                var isMe = person.id === memberFamilyId;
                personLink.textContent = isMe ? "Me" : person.fullName;
                personLink.href = "javascript:void(0);";
                personLink.setAttribute("data-id", person.id);
                personLink.addEventListener("click", function() {
                    var id = this.getAttribute("data-id");
                    document.getElementById("personIdInput").value = id;
                    fetch("http://localhost:45571/api/FamilyMember/GetGetFamilyMemberById/" + id)
                        .then((response) => response.json())
                        .then((data) => {
                            var givenNamesInput = document.getElementById("givenNamesInput");

                            idInput.value = data.id;
                            fullNameNameInput.value = data.fullName;
                            var genderInput = document.getElementById("genderInput");
                            if (data.gender === 1) {
                                genderInput.value = "1";
                            } else if (data.gender === 0) {
                                genderInput.value = "0";
                            }
                            var dateOfBirthInput = document.getElementById("dateOfBirthInput");
                            var dob = data.dob;
                            var formattedDOB = dob.slice(0, 10);
                            dateOfBirthInput.value = formattedDOB;

                            phoneInput.value = data.phone;
                            emailInput.value = data.email;
                            addressInput.value = data.address;
                            familyInput.value = data.familyId;

                            var parentData = {
                                id: data.id,
                                fullName: data.fullName,
                                gender: data.gender,
                                dob: data.dob,
                                phone: data.phone,
                                email: data.email,
                                address: data.address,
                                relationType: null,
                                familyId: data.familyId
                            };

                            selectedParentData = parentData;
                        })
                        .catch((error) => {
                            console.error("Lỗi khi lấy dữ liệu từ API:", error);
                        });

                    var selectedPersonNode = this.parentNode;
                    if (selectedNode) {
                        selectedNode.classList.remove("selected");
                    }
                    selectedPersonNode.classList.add("selected");
                    selectedNode = selectedPersonNode;
                });

                personNode.appendChild(personLink);

                existingMembers[person.id] = personNode;

                if (person.relatives && person.relatives.length > 0) {
                    var relativeList = document.createElement("ul");
                    personNode.appendChild(relativeList);

                    var otherRelativeList = [];

                    for (var j = 0; j < person.relatives.length; j++) {
                        var relative = person.relatives[j];
                        if (relative.relationType === "Sibling") {
                            siblingRelativeList.push(relative);
                        } else {
                            otherRelativeList.push(relative);
                        }
                    }

                    for (var k = 0; k < otherRelativeList.length; k++) {
                        var otherRelative = otherRelativeList[k];
                        var otherRelativeNode = createPersonNode(otherRelative);
                        relativeList.appendChild(otherRelativeNode);
                    }
                }

                return personNode;
            }

            for (var i = 0; i < data.length; i++) {
                var person = data[i];
                var personId = person.id;

                var existingMemberNode = existingMembers[personId];

                if (existingMemberNode) {
                    var personLink = existingMemberNode.querySelector("a");
                    personLink.textContent = person.fullName;
                } else {
                    var personNode = createPersonNode(person);
                    parentElement.appendChild(personNode);

                    if (person.relationType === "Sibling") {
                        siblingList.appendChild(personNode);
                    }
                }
            }

            var siblingNodes = document.querySelectorAll(".sibling-node");
            siblingNodes.forEach(function(node) {
                node.style.display = "inline-block";
                node.style.marginRight = "10px";
            });
            var fullNameInput = document.getElementById("fullNameNameInput");
            fullNameInput.addEventListener("input", function() {
                var fullName = fullNameInput.value;
                var selectedPersonId = document.getElementById("personIdInput").value;
                var selectedPersonNode = existingMembers[selectedPersonId];
                if (selectedPersonNode) {
                    var selectedPersonLink = selectedPersonNode.querySelector("a");
                    selectedPersonLink.textContent = fullName;
                }
            });


        }

        //Update node infomation
        function updateFamilyMember(id, updatedData) {
            fetch("http://localhost:45571/api/FamilyMember/UpdateFamilyMember/" + id, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(updatedData),
            })
                .then((response) => response.json())
                .then((data) => {
                    console.log("Thành viên được cập nhật thành công:", data);

                    var nodeToUpdate = existingMembers[data.id];
                    if (nodeToUpdate) {
                        if (
                            nodeToUpdate.dataset.fullName === data.fullName &&
                            nodeToUpdate.dataset.gender === data.gender &&
                            nodeToUpdate.dataset.dateOfBirth === data.dob &&
                            nodeToUpdate.dataset.phone === data.phone &&
                            nodeToUpdate.dataset.email === data.email &&
                            nodeToUpdate.dataset.address === data.address &&
                            nodeToUpdate.dataset.family === data.familyId
                        ) {
                            console.log("Không có thay đổi trong thông tin thành viên");
                            return;
                        }

                        nodeToUpdate.dataset.fullName = data.fullName;
                        nodeToUpdate.dataset.gender = data.gender;
                        nodeToUpdate.dataset.dateOfBirth = data.dob;
                        nodeToUpdate.dataset.phone = data.phone;
                        nodeToUpdate.dataset.email = data.email;
                        nodeToUpdate.dataset.address = data.address;
                        nodeToUpdate.dataset.family = data.familyId;

                        var nodeLink = nodeToUpdate.querySelector("a");
                        nodeLink.textContent = data.fullName;
                    }
                })
                .catch((error) => {
                    console.error("Lỗi khi cập nhật thông tin thành viên:", error);
                });
        }



        //Delete node
        function deleteSelectedNode() {
            if (selectedNode) {
                var selectedPersonId = selectedNode.querySelector("a").getAttribute("data-id");
                deleteFamilyMember(selectedPersonId);
                selectedNode.remove();
                selectedNode = null;
            }
        }

        function deleteFamilyMember(id) {
            fetch("http://localhost:45571/api/FamilyMember/DeleteFamilyMember/" + id, {
                method: "DELETE"
            })
                .then(function(response) {
                    if (response.ok) {
                        console.log("Thành viên gia đình đã được xóa thành công.");
                    } else {
                        throw new Error("Lỗi khi xóa thành viên gia đình.");
                    }
                })
                .catch(function(error) {
                    console.error(error);
                });
        }

        var relationType;
        //ham add child
        function addChildNode(relationTypeValue) {
            if (!selectedParentData) {
                alert("Vui lòng chọn một node cha.");
                return;
            }

            var parentData = selectedParentData;

            var childNode = document.createElement("li");
            var childLink = document.createElement("a");
            childLink.textContent = "Child";
            childLink.href = "javascript:void(0);";
            childLink.addEventListener("click", function() {
                updateContactInfo(childNode);
            });

            childNode.appendChild(childLink);

            var childList = document.createElement("ul");
            childNode.appendChild(childList);

            var parentNode = selectedNode;
            var parentChildList = parentNode.querySelector("ul");
            if (!parentChildList) {
                parentChildList = document.createElement("ul");
                parentNode.appendChild(parentChildList);
            }

            parentChildList.appendChild(childNode);

            childNode.dataset.fullName = parentData.fullName;
            childNode.dataset.gender = parentData.gender;
            childNode.dataset.dateOfBirth = parentData.dob;
            childNode.dataset.phone = parentData.phone;
            childNode.dataset.email = parentData.email;
            childNode.dataset.address = parentData.address;
            childNode.dataset.family = parentData.familyId;

            console.log("Thông tin node cha:", parentData);

            console.log("Thông tin node con:", {
                fullName: childNode.dataset.fullName,
                gender: childNode.dataset.gender,
                dob: childNode.dataset.dateOfBirth,
                phone: childNode.dataset.phone,
                email: childNode.dataset.email,
                address: childNode.dataset.address,
                familyId: childNode.dataset.family
            });

            relationType = relationTypeValue;
            childNode.dataset.relationType = relationType;
        }

        function updateContactInfo(node) {
            var contactInputs = document.querySelectorAll("#personal input");
            contactInputs.forEach(function(input) {
                input.value = "";
            });
        }


        function showSection(sectionId) {
            var sections = document.getElementsByClassName("section");
            for (var i = 0; i < sections.length; i++) {
                sections[i].classList.remove("active");
            }
            var section = document.getElementById(sectionId);
            if (section) {
                section.classList.add("active");
            }
        }

        //ham add sibling
        function addSiblingNode(relationTypeValue) {
            if (!selectedParentData) {
                alert("Vui lòng chọn một node.");
                return;
            }
            var parentData = selectedParentData;

            var selectedNodeParent = selectedNode.parentNode;
            var siblingNode = document.createElement("li");
            var siblingLink = document.createElement("a");
            siblingLink.textContent = "Sibling";
            siblingLink.href = "javascript:void(0);";
            siblingLink.addEventListener("click", function() {
                selectedNode = siblingNode;
                updateContactInfo(siblingNode);
            });

            siblingNode.appendChild(siblingLink);

            if (selectedNodeParent) {
                selectedNode.insertAdjacentElement("afterend", siblingNode);
            }

            selectedNodeParent.appendChild(siblingNode);

            console.log(parentData)

            selectedNode = siblingNode;

            relationType = relationTypeValue;
            childNode.dataset.relationType = relationType;
        }

        //add spouse
        function addSpouseNode(relationTypeValue) {
            if (!selectedParentData) {
                alert("Vui lòng chọn một node.");
                return;
            }

            var selectedNodeParent = selectedNode.parentNode;

            var spouseNode = document.createElement("li");
            spouseNode.classList.add("spouse-node");
            spouseNode.innerHTML = "<a>Spouse</a>";

            var spouseLink = spouseNode.querySelector("a");
            spouseLink.addEventListener("click", function() {
                selectedNode = spouseNode;
                updateContactInfo(spouseNode);
            });

            selectedNodeParent.insertBefore(spouseNode, selectedNode.nextSibling);

            selectedNode = spouseNode;

            relationType = relationTypeValue;
            spouseNode.dataset.relationType = relationType;

            selectedNode.classList.add("selected-node");
        }



        // add parent node
        function addParentNode(relationTypeValue) {
            if (!selectedParentData) {
                alert("Vui lòng chọn một node.");
                return;
            }

            var selectedNodeParent = selectedNode.parentNode;

            var parentNode = document.createElement("li");
            parentNode.innerHTML = "<a>Parent</a>";

            var parentLink = parentNode.querySelector("a");
            parentLink.addEventListener("click", function() {
                selectedNode = parentNode;
                updateContactInfo(parentNode);
            });

            selectedNodeParent.insertAdjacentElement("beforebegin", parentNode);

            selectedNode = parentNode;

            relationType = relationTypeValue;

            parentNode.dataset.relationType = relationType;

            parentNode.classList.add("parent-node");

            selectedNode.classList.add("selected-node");
            console.log(selectedNode)

        }

        //save information node
        function saveInforNode() {
            var idInput = document.getElementById("personIdInput");
            var id = idInput.value;
            var updatedData = {
                id: id,
                fullName: fullNameNameInput.value,
                gender: parseInt(genderInput.selectedOptions[0].value),
                dob: dateOfBirthInput.value,
                phone: phoneInput.value,
                email: emailInput.value,
                address: addressInput.value,
                familyId: familyInput.value
            };

            updateFamilyMember(id, updatedData);
        }
        function saveData() {
            //add relation
            //var relationType = selectedNode.dataset.relationType;
            if (!selectedNode) {
                alert("Vui lòng chọn một node.");
                return;
            }

            var parentData = selectedParentData;
            var parentNode = selectedNode;
            var parentChildList = parentNode.querySelector("ul");
            if (!parentChildList) {
                parentChildList = document.createElement("ul");
                parentNode.appendChild(parentChildList);
            }

            var childNode = document.createElement("li");
            parentChildList.appendChild(childNode);

            childNode.dataset.id = parentData.id;
            childNode.dataset.fullName = parentData.fullName;
            childNode.dataset.gender = parentData.gender;
            childNode.dataset.dateOfBirth = parentData.dob;
            childNode.dataset.phone = parentData.phone;
            childNode.dataset.email = parentData.email;
            childNode.dataset.address = parentData.address;
            childNode.dataset.relationType = null;
            childNode.dataset.family = parentData.familyId;

            var childData = {
                id: 0,
                fullName: document.getElementById("fullNameNameInput").value,
                gender: document.getElementById("genderInput").value,
                dob: document.getElementById("dateOfBirthInput").value,
                phone: document.getElementById("phoneInput").value,
                email: document.getElementById("emailInput").value,
                address: document.getElementById("addressInput").value,
                familyId: document.getElementById("familyInput").value,
                relationType: relationType
            };
            console.log("parentData", parentData)
            parentData.relatives = [childData];

            fetch("http://localhost:45571/api/Family/addNode", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(parentData)
            })
                .then(function(response) {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error("Lỗi khi lưu mối quan hệ");
                    }
                })
                .then(function(data) {
                    console.log(data);
                })
                .catch(function(error) {
                    console.error(error);
                });
        }


        @{
            var id = Context.Session.GetString("MemberFamilyId");
        }
var id = '@id';

        fetch("http://localhost:45571/api/Family/" + id + "/tree1")
            .then((response) => response.json())
            .then((data) => {
                var familyTreeElement = document.getElementById("familyTree");
                displayFamilyTree(data, familyTreeElement);
            })
            .catch((error) => {
                console.error("Lỗi khi lấy dữ liệu từ API:", error);
            });

    </script>


    <script>
        function showSection(sectionId) {
            var sections = document.getElementsByClassName("section");
            for (var i = 0; i < sections.length; i++) {
                sections[i].classList.remove("active");
            }

            var section = document.getElementById(sectionId);
            section.classList.add("active");
        }
        var treeNodes = document.querySelectorAll(".tree li a");
        for (var i = 0; i < treeNodes.length; i++) {
            treeNodes[i].addEventListener("click", function() {
                var currentSelected = document.querySelector(".selected");
                if (currentSelected) {
                    currentSelected.classList.remove("selected");
                }
                this.parentNode.classList.add("selected");
            });
        }

        window.addEventListener("DOMContentLoaded", function() {
            showSection("personal");
            var meNode = document.querySelector(".tree li a");
            meNode.classList.add("selected");
        });


        window.addEventListener("DOMContentLoaded", function() {
            showSection("personal");
        });
    </script>
</body>

</html>