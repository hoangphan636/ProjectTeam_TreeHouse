#pragma checksum "D:\FPT\Sem8\PRN231\ProjectTeam_TreeHouse\Project_FamillyTree\Views\Tree\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "9a5201d18c03ea59d366d5c6ac85863559a84d54"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Tree_Index), @"mvc.1.0.view", @"/Views/Tree/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\FPT\Sem8\PRN231\ProjectTeam_TreeHouse\Project_FamillyTree\Views\_ViewImports.cshtml"
using Project_FamillyTree;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\FPT\Sem8\PRN231\ProjectTeam_TreeHouse\Project_FamillyTree\Views\_ViewImports.cshtml"
using Project_FamillyTree.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a5201d18c03ea59d366d5c6ac85863559a84d54", @"/Views/Tree/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b9bc77c592d565df80dba1438cb5d64115794a07", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Tree_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9a5201d18c03ea59d366d5c6ac85863559a84d543323", async() => {
                WriteLiteral(@"
    <link rel=""stylesheet"" type=""text/css"" href=""styles.css"">
    <script src=""script.js""></script>
    <link rel=""stylesheet"" type=""text/css"" href=""/index.css"">
    <style>
        .sidebar-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .tree {
            width: fit-content;
            margin-top: 200px;
        }

        <style >
        .sidebar-content {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .tree {
            width: fit-content;
            margin-top: 200px;
        }
    </style>


");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9a5201d18c03ea59d366d5c6ac85863559a84d545064", async() => {
                WriteLiteral(@"
    <div class=""header"">
        <div class=""header-content"">
            <h1 class=""header-title"">Family Tree</h1>
            <div class=""header-buttons"">
                <a href=""#"" class=""header-button"" style=""margin-left: 680px;"">Activities</a>
            </div>
        </div>
        <button class=""header-button"">Login</button>
    </div>
    <div id=""activityPopup"" class=""popup"">
        <div class=""popup-content"">
            <h2 id=""activityTitle""></h2>
            <input type=""text"" id=""activityName"" placeholder=""Activity Name"">
            <input type=""text"" id=""activityDescription"" class=""large-input"" placeholder=""Activity Description"">
            <input type=""text"" id=""activityStartDate"" placeholder=""Start Date"">
            <input type=""text"" id=""activityEndDate"" placeholder=""End Date"">
            <input type=""text"" id=""activityPhone"" placeholder=""Phone Number"">
            <input type=""text"" id=""activityEmail"" placeholder=""Email"">
            <input type=""text"" id=""activi");
                WriteLiteral(@"tyCreatedBy"" placeholder=""Created By"">
        </div>
        <button id=""closePopup"" class=""popup-close"">Close</button>
    </div>


    <div class=""sidebar"">
        <div class=""sidebar-header"">
            <h2>Me</h2>
        </div>
        <div class=""sidebar-menu"">
            <a href=""#"" onclick=""showSection('personal')"">Personal</a>
            <a href=""#"" onclick=""showSection('contact')"">Contact</a>
            <a href=""#"" onclick=""showSection('biographical')"">Biographical</a>
        </div>
        <div class=""sidebar-content"">
            <div id=""personal"" class=""section active"">
                <h2>Personal</h2>
                <input type=""text"" class=""large-input"" placeholder=""Given names"" id=""givenNamesInput"">
                <input type=""text"" class=""large-input"" placeholder=""Surname now"">
                <input type=""text"" class=""large-input"" placeholder=""Surname at birth"">
                <input type=""text"" class=""large-input"" placeholder=""Gender"">
                <inpu");
                WriteLiteral(@"t type=""text"" class=""large-input"" placeholder=""Birth date"">
            </div>

            <div id=""contact"" class=""section active"">
                <h2>Contact</h2>
                <input type=""text"" class=""large-input"" placeholder=""Email"">
                <input type=""text"" class=""large-input"" placeholder=""Website"">
                <input type=""text"" class=""large-input"" placeholder=""Blog"">
                <input type=""text"" class=""large-input"" placeholder=""Photo site"">
                <input type=""text"" class=""large-input"" placeholder=""Home tel"">
                <input type=""text"" class=""large-input"" placeholder=""Work tel"">
                <input type=""text"" class=""large-input"" placeholder=""Mobile"">
                <input type=""text"" class=""large-input"" placeholder=""Address"">
                <input type=""text"" class=""large-input"" placeholder=""Other"">
            </div>

            <div id=""biographical"" class=""section active"">
                <h2>Biographical</h2>
                <input ");
                WriteLiteral(@"type=""text"" class=""large-input"" placeholder=""Birth place"">
                <input type=""text"" class=""large-input"" placeholder=""Profession"">
                <input type=""text"" class=""large-input"" placeholder=""Company"">
                <input type=""text"" class=""large-input"" placeholder=""Interests"">
                <input type=""text"" class=""large-input"" placeholder=""Activities"">
                <input type=""text"" class=""large-input"" placeholder=""Bio notes"">
            </div>

            <div class=""sidebar-footer"">
                <p>Click to add your relatives:</p>
                <button onclick=""addParent()"">Add Parent</button>
                <button onclick=""addRelative('partner')"">Add Partner</button>
                <button onclick=""addRelative('sibling')"">Add Brother/Sister</button>
                <button onclick=""addRelative('child')"">Add Child</button>
                <button onclick=""saveData()"">Save</button>
            </div>
        </div>
    </div>

    <div class=""content"">");
                WriteLiteral(@"
        <div class=""tree"">
            <ul>
                <li>
                    <a href=""#"" style=""font-size: 24px;"">Me</a>
                    <ul id=""familyTree""></ul>
                </li>
            </ul>
        </div>
    </div>


    <script>
        // Lấy các phần tử cần thiết
        var activityButton = document.querySelector("".header-button"");
        var popup = document.getElementById(""activityPopup"");
        var closePopupButton = document.getElementById(""closePopup"");

        // Xử lý sự kiện khi nhấp vào nút ""Activities""
        activityButton.addEventListener(""click"", function() {
            // Hiển thị popup
            popup.style.visibility = ""visible"";
            popup.style.opacity = 1;

            // Lấy thông tin hoạt động và cập nhật vào popup
            var activityTitle = document.getElementById(""activityTitle"");
            var activityDescription = document.getElementById(""activityDescription"");
            var activityStartDate = document.");
                WriteLiteral(@"getElementById(""activityStartDate"");
            var activityEndDate = document.getElementById(""activityEndDate"");
            var activityPhone = document.getElementById(""activityPhone"");
            var activityEmail = document.getElementById(""activityEmail"");
            var activityCreatedBy = document.getElementById(""activityCreatedBy"");

            // Gán thông tin cho các phần tử trong popup
            activityTitle.textContent = ""Activity Title"";
            activityDescription.textContent = ""Activity Description"";
            activityStartDate.textContent = ""Start Date"";
            activityEndDate.textContent = ""End Date"";
            activityPhone.textContent = ""Phone Number"";
            activityEmail.textContent = ""Email"";
            activityCreatedBy.textContent = ""Created By"";
        });

        // Xử lý sự kiện khi nhấp vào nút đóng popup
        closePopupButton.addEventListener(""click"", function() {
            // Ẩn popup
            popup.style.visibility = ""hidden""");
                WriteLiteral(@";
            popup.style.opacity = 0;
        });
    </script>
    <script>
        // Hàm hiển thị mối quan hệ trong cây gia đình
        // Hàm hiển thị mối quan hệ trong cây gia đình
        // Hàm hiển thị mối quan hệ trong cây gia đình
        function displayFamilyTree(data, parentElement) {
            var siblingList = document.createElement(""ul"");

            for (var i = 0; i < data.length; i++) {
                var person = data[i];
                var personNode = document.createElement(""li"");
                var personLink = document.createElement(""a"");
                personLink.textContent = person.fullName;
                personLink.href = ""#"";
                personNode.appendChild(personLink);

                if (person.relatives && person.relatives.length > 0) {
                    var relativeList = document.createElement(""ul"");
                    personNode.appendChild(relativeList);
                    displayFamilyTree(person.relatives, relativeList);
     ");
                WriteLiteral(@"           }

                if (person.relationType === ""Sibling"") {
                    siblingList.appendChild(personNode);
                } else {
                    parentElement.appendChild(personNode);
                }
            }

            if (siblingList.childNodes.length > 1) {
                var siblingNode = document.createElement(""li"");
                siblingNode.classList.add(""sibling"");
                siblingNode.appendChild(siblingList);
                parentElement.appendChild(siblingNode);
            } else if (siblingList.childNodes.length === 1) {
                parentElement.appendChild(siblingList.childNodes[0]);
            }
        }



        // Lấy dữ liệu từ API (mô phỏng dữ liệu trả về)
        var apiData = [
            {
                ""id"": 1,
                ""fullName"": ""John Smith"",
                ""gender"": 1,
                ""dob"": ""1990-05-15T00:00:00"",
                ""phone"": ""1234567890"",
                ""email"": ""johnsmith");
                WriteLiteral(@"@example.com"",
                ""address"": ""123 Main St, New York"",
                ""relationType"": null,
                ""relatives"": [],
                ""children"": null
            },
            {
                ""id"": 4,
                ""fullName"": ""Sarah Smith"",
                ""gender"": 0,
                ""dob"": ""1992-03-28T00:00:00"",
                ""phone"": ""7894561230"",
                ""email"": ""sarahsmith@example.com"",
                ""address"": ""456 Pine St, New York"",
                ""relationType"": null,
                ""relatives"": [
                    {
                        ""id"": 1,
                        ""fullName"": ""John Smith"",
                        ""gender"": 1,
                        ""dob"": ""1990-05-15T00:00:00"",
                        ""phone"": ""1234567890"",
                        ""email"": ""johnsmith@example.com"",
                        ""address"": ""123 Main St, New York"",
                        ""relationType"": ""Sibling"",
                        ""relative");
                WriteLiteral(@"s"": [],
                        ""children"": null
                    }
                ],
                ""children"": null
            }
        ];

        // Hiển thị cây gia đình
        var familyTreeElement = document.getElementById(""familyTree"");
        displayFamilyTree(apiData, familyTreeElement);
    </script>
    <script>

        // Bên dưới hàm saveData() đã được cập nhật
        function saveData() {
            var selectedNode = document.querySelector("".selected"");
            if (selectedNode) {
                var givenNamesInput = document.getElementById(""givenNamesInput"");
                var givenNamesValue = givenNamesInput.value;
                selectedNode.textContent = givenNamesValue;


            }
        }


        function showSection(sectionId) {
            var sections = document.getElementsByClassName(""section"");
            for (var i = 0; i < sections.length; i++) {
                sections[i].classList.remove(""active"");
            }

  ");
                WriteLiteral(@"          var section = document.getElementById(sectionId);
            section.classList.add(""active"");
        }

        //function addParent() {
        //    var selectedNode = document.querySelector("".selected"");
        //    if (selectedNode) {
        //        var newNode1 = document.createElement(""li"");
        //        newNode1.innerHTML = '<a href=""#"">Morther</a>';

        //        var newNode2 = document.createElement(""li"");
        //        newNode2.innerHTML = '<a href=""#"">Farther</a>';

        //        var parentList = document.createElement(""ul"");
        //        parentList.style.display = ""block"";
        //        parentList.appendChild(newNode1);
        //        parentList.appendChild(newNode2);

        //        var parentNode = document.createElement(""li"");
        //        parentNode.style.display = ""inline"";
        //        parentNode.appendChild(parentList);

        //        var grandparentNode = selectedNode.parentNode.parentNode;
        //   ");
                WriteLiteral(@"     var grandparentList = grandparentNode.querySelector(""ul"");
        //        if (!grandparentList) {
        //            grandparentList = document.createElement(""ul"");
        //            grandparentNode.appendChild(grandparentList);
        //        }

        //        var siblingNodes = Array.from(grandparentList.children);
        //        var selectedNodeIndex = siblingNodes.indexOf(selectedNode);

        //        siblingNodes.splice(selectedNodeIndex, 0, parentNode);

        //        grandparentList.innerHTML = '';
        //        siblingNodes.forEach(function (node) {
        //            grandparentList.appendChild(node);
        //        });

        //        siblingNodes = Array.from(grandparentList.children);

        //        selectedNode.classList.remove(""selected"");
        //        newNode1.firstChild.classList.add(""selected"");
        //        newNode2.firstChild.classList.add(""selected"");
        //    }
        //}

        //function addRelati");
                WriteLiteral(@"ve(type) {
        //    var selectedNode = document.querySelector("".selected"");
        //    if (selectedNode) {
        //        var newNode = document.createElement(""li"");
        //        newNode.innerHTML = '<a href=""#"">' + type.charAt(0).toUpperCase() + type.slice(1) + ""</a>"";

        //        var addRelativeButtons = newNode.querySelectorAll("".sidebar-footer button"");
        //        for (var i = 0; i < addRelativeButtons.length; i++) {
        //            addRelativeButtons[i].addEventListener(""click"", function () {
        //                addRelative(this.dataset.type);
        //            });
        //        }

        //        newNode.addEventListener(""click"", function (event) {
        //            event.stopPropagation();
        //            var currentSelected = document.querySelector("".selected"");
        //            if (currentSelected) {
        //                currentSelected.classList.remove(""selected"");
        //            }
        //           ");
                WriteLiteral(@" this.classList.add(""selected"");
        //        });

        //        selectedNode.classList.remove(""selected"");

        //        if (type === ""child"") {
        //            var childList = selectedNode.querySelector(""ul"");
        //            if (!childList) {
        //                childList = document.createElement(""ul"");
        //                selectedNode.appendChild(childList);
        //            }
        //            childList.appendChild(newNode);
        //            var givenNamesInput = document.getElementById(""givenNamesInput"");
        //            givenNamesInput.addEventListener(""input"", function () {
        //                newNode.firstChild.textContent = this.value;
        //            });
        //        } else {
        //            var siblingNode = document.createElement(""li"");
        //            siblingNode.appendChild(newNode);

        //            var parentSiblingList = selectedNode.parentNode.parentNode.querySelector(""ul"");
   ");
                WriteLiteral(@"     //            if (!parentSiblingList) {
        //                parentSiblingList = document.createElement(""ul"");
        //                selectedNode.parentNode.parentNode.appendChild(parentSiblingList);
        //            }

        //            var siblingNodes = Array.from(parentSiblingList.children);
        //            var selectedNodeIndex = siblingNodes.indexOf(selectedNode);

        //            siblingNodes.splice(selectedNodeIndex + 1, 0, siblingNode);

        //            parentSiblingList.innerHTML = """";
        //            siblingNodes.forEach(function (node) {
        //                parentSiblingList.appendChild(node);
        //            });

        //            siblingNodes = Array.from(parentSiblingList.children);
        //        }
        //    }
        //}



        //var treeNodes = document.querySelectorAll("".tree li a"");
        //for (var i = 0; i < treeNodes.length; i++) {
        //    treeNodes[i].addEventListener(""click"", func");
                WriteLiteral(@"tion () {
        //        var currentSelected = document.querySelector("".selected"");
        //        if (currentSelected) {
        //            currentSelected.classList.remove(""selected"");
        //        }
        //        this.parentNode.classList.add(""selected"");
        //    });
        //}

        window.addEventListener(""DOMContentLoaded"", function() {
            showSection(""personal"");
            var meNode = document.querySelector("".tree li a"");
            meNode.classList.add(""selected"");
        });


        window.addEventListener(""DOMContentLoaded"", function() {
            showSection(""personal"");
        });
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n\r\n</html>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
